server:
  error:
    include-message: always
    include-binding-errors: always
  shutdown: graceful
  forward-headers-strategy: framework
  servlet:
    context-path: /api/market
  tomcat:
    connection-timeout: 10s
    keep-alive-timeout: 20s
    threads:
      max: 50
      min-spare: 5

spring:
  jackson:
    deserialization:
      fail-on-unknown-properties: true
  threads:
    virtual:
      enabled: true
  application:
    name: market-service
  lifecycle:
    timeout-per-shutdown-phase: 15s

  datasource:
    username: ${app.postgres.user}
    password: ${app.postgres.password}
    url: jdbc:postgresql://${app.postgres.host}:${app.postgres.port}/${app.postgres.database}
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10

  flyway:
    enabled: true
    locations: classpath:db/migration

  keycloak:
    server-url: http://localhost/keycloak
    server-external-url: http://localhost/keycloak
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${spring.keycloak.server-external-url}/realms/moviebets-realm
          jwk-set-uri: ${spring.keycloak.server-url}/realms/moviebets-realm/protocol/openid-connect/certs

  kafka:
    bootstrap-servers: "my-cluster-kafka-bootstrap:9092"
    admin:
      auto-create: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      transaction-id-prefix: ${INSTANCE_NAME}-
      properties:
        delivery.timeout.ms: 120000
        linger.ms: 0
        request.timeout.ms: 30000
        max.in.flight.requests.per.connection: 5
        enable.idempotence: true
        allow.auto.create.topics: false
    consumer:
      market-close:
        group-id: market-close-consumer
      group-id: market-consumer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: net.skycomposer.moviebets.*
        allow.auto.create.topics: false
        isolation.level: read_committed

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
    console: "%d{yyyy-MM-dd HH:mm:ss} ${LOG_LEVEL_PATTERN:-%5p} %m%n"
  level:
    net.skycomposer.moviebets: DEBUG
    org.springframework.cloud.kubernetes: TRACE
    org.springframework.security: DEBUG
    org.flywaydb: DEBUG
    org.springframework.kafka.transaction.KafkaTransactionManager: DEBUG
    org.springframework.transaction: DEBUG
    org.springframework.orm.jpa.JpaTransactionManager: DEBUG
    org.apache.kafka.clients.producer.internals.TransactionManager: DEBUG

app:
  postgres:
    host: moviebets-postgres
    port: 5432
    database: marketdb
    user: marketdbuser
    password: dbpass

openapi:
  oauthflow:
    authServerUrl: ${spring.keycloak.server-external-url}
    realm: moviebets-realm

jwt:
  auth:
    converter:
      resource-id: moviebets-app
      principal-attribute: preferred_username

bet:
  commands:
    topic:
      name: bet-commands
  settle:
    topic:
      name: bet-settle

market:
  commands:
    topic:
      name: market-commands
  close:
    topic:
      name: market-close
    check-time:
      threshold-seconds: 5